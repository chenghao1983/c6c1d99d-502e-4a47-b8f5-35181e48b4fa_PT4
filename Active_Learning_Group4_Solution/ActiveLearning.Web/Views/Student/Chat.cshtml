@using ActiveLearning.Web.Controllers;
@using ActiveLearning.DB;
@model IEnumerable<Chat>
@{
    ViewBag.Title = "Chat";
}

<h2>Let's Chat</h2>

@Html.Partial("_MessageBoxPartial")

<div class="container left" style="width:100%">
    <div style="height:600px;overflow-y:scroll;text-wrap:normal" id="discussionDiv" class="wordwrap">
        <div class="list-group" id="discussion"></div>
    </div>
    <br />
    <div class="form-group-lg container">
        <div class="col-sm-10">
            <input type="text" id="message" class="form-control col-sm-4" style="max-width:600px" />
            <input type="button" id="sendmessage" value="Send" class="btn-primary form-control col-sm-4" style="margin-left:20px;width:100px" />
            <input type="hidden" id="displayname" />
        </div>
    </div>
    <br />
    <div>
        <label id="error" class="text-info right"></label>
    </div>
</div>
@section scripts {
    <!--Reference the jQuery library. -->
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/json2.js"></script>

    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>


        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (sender ,studentSid, instructorSid, name, message) {
                // Add the message to the page.
                $('#discussion').append('<a href="#" class="list-group-item list-group-item-'+ getMessageClass(studentSid)+'">' + sender +': ' + htmlEncode(name)
                    + ': ' + htmlEncode(message) + '</a>');
                $('#discussionDiv').scrollTop($('#discussionDiv').prop("scrollHeight"));
            };

            $('#displayname').val("");


            // Set initial focus to message input box.
            $('#message').focus();

            // Start the connection.
            $.connection.hub.start().done(function () {

                $('#sendmessage').click(function () {
                    $('#error').text("");
                    //if ($('#displayname').val().length == 0) {
                    //    alert("Name is empty !");
                    //    return;
                    //}
                    if ($('#message').val().trim().length == 0) {
                        //alert("Please enter something");
                        $('#error').text("Please enter something");
                        return;
                    }
                    // Call the Send method on the hub.
                    chat.server.send(@ViewBag.CourseSid, @ViewBag.StudentSid,"", $('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                    $('#discussionDiv').scrollTop($('#discussionDiv').prop("scrollHeight"));
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }

        function getMessageClass(studentSid) {
            if(studentSid == @ViewBag.StudentSid)
                return 'success';
            else
                return 'default';
            }


        function showChatHistory()
        {
            @if (Model != null && Model.Count() > 0)
            {
                foreach (Chat chat in Model)
                {
                    string fullName = string.Empty;
                    string sender = string.Empty;
                    if (chat.Student != null && chat.Student.User != null)
                    {
                        fullName = chat.Student.User.FullName;
                        sender = "Student";
                    }
                    else if (chat.Instructor != null && chat.Instructor.User != null)
                    {
                        fullName = chat.Instructor.User.FullName;
                        sender = "Instructor";
                    }

                    int sid = chat.StudentSid.HasValue ? chat.StudentSid.Value : 0;

                    <text>
            $('#discussion').append('<a href="#" class="list-group-item list-group-item-'+ getMessageClass(@sid)+'">@sender: ' +
           ('@fullName') + ': ' + ('@chat.Message') + '</a>');
            </text>
                }
                 <text>
            $('#discussion').append('<a href="#" class="list-group-item list-group-item-info>End of chat history</a>');
            $('#discussionDiv').scrollTop($('#discussionDiv').prop("scrollHeight"));
            </text>
            }
        }

        $(document).ready
        (
            function()
            {
                $('#message').keypress
                (function(e)
                {
                    if(e.keyCode==13)
                        $('#sendmessage').click();
                }
                );
                showChatHistory();
            }
        );
    </script>
}
<style>
    .wordwrap {
        white-space: pre-wrap; /* CSS3 */
        white-space: -moz-pre-wrap; /* Firefox */
        white-space: -pre-wrap; /* Opera <7 */
        white-space: -o-pre-wrap; /* Opera 7 */
        word-wrap: break-word; /* IE */
    }
</style>